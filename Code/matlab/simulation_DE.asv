%%
% Written by Tada, Jimmie 
%
% This is the simulation which uses the differential evolution to compute
% the optimal routing and number of workers at the same time. 

load_settings;

% Option to make video
make_video = false;

%% Choose number of workers and the routing 

minND = floor(num_customers/8); 
maxND = floor(num_customers*2/3);
N_best = 3;
w = linspace(0,1,N_best);
finalists = cell(N_best,1);
for i = 1:N_best
%    do something 
   finalist = DetermineSectors(customers,minND,maxND,w(i),Param,Cost); % broken 
   finalists{i} = finalist; 
end

% plot the N best sector results
for i = 1:N_best
   [~,routing,~] = build_sched_DE(finalists{i},customers,Param);
   plot_routing(routing,[customers.pos],Param)
   sgtitle(sprintf('Route #%d, w=%4.2f',i,w(i)))
end

for j = 1:N_best
   %% Build a schedule (appointment for customers) specifically for the
   % quadrant model. The appointment times are chosen to be the average
   % arrival time of the workers assuming nobody cancels.

   % Generate array of workers.
   [arrival_times,routing,num_workers] = build_sched_DE(finalists{j},customers,Param);
   workers = Worker(num_workers);

   %% Find buffer time
   % 
   num_runs = 30; % choose high num_runs if cancellation rate is high   

   % searches for buffer times in the initial interval [-l,l]
   l = Param.mst*ones(num_customers,1)/2;

   % gets the stochastic scheduling cost
   J = @(d)getSchedulingCost(d,workers,customers,...
       Param,Cost,arrival_times,routing,num_runs);

   % sets the relevant Diffevo parameters
   DEparams.ND = num_customers;    % dimension of input
   DEparams.CR = 0.9;  % mutation probability (0,1) 
   DEparams.F = 0.8;   % mutation strength (0,2) 
   DEparams.NP = 8;   % num_customers*10;   % pop size
   DEparams.Nmax = 3; % number of evolutions 

   % the final generation of optimal deltas
%    delta = zeros(num_customers,1);
   [pop,costs] = diffevoDelta(J,l,DEparams,Cost);
   [~,ind] = min(costs);
   delta = pop(:,ind);


   %% Give out the appointment 

   for i = 1:num_customers
      customers(i).scheduled_time = max(floor(arrival_times(i)) + delta(i),0);
   end

   %% Assign routes.
   for i = 1:num_workers
      workers(i).tasks = routing{i}(~ismember(routing{i},cancels));
   end

   %% Simulation 
   run_simulation
   
   %% Compute Cost
   % call function
   [jm, ji, jw, jt, jo] = compute_simulation_cost(workers, customers, Cost, true);
   total_cost = jm + ji + jw + jt + jo;
   fprintf('Total Cost for #%d = %10.2f\n\n\n',j,total_cost)
   title(sprintf('Cost for Route #%d = %6.2f',j,total_cost))
end